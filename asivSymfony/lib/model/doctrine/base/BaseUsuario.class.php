<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Usuario', 'doctrine');

/**
 * BaseUsuario
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_usuario
 * @property string $username
 * @property string $email
 * @property string $password
 * @property string $nombre
 * @property string $apellido
 * @property integer $genero
 * @property timestamp $ultimo_ingreso
 * @property integer $id_rol
 * @property integer $status
 * @property Rol $Rol
 * @property Doctrine_Collection $Empleado
 * @property Doctrine_Collection $Paciente
 * 
 * @method integer             getIdUsuario()      Returns the current record's "id_usuario" value
 * @method string              getUsername()       Returns the current record's "username" value
 * @method string              getEmail()          Returns the current record's "email" value
 * @method string              getPassword()       Returns the current record's "password" value
 * @method string              getNombre()         Returns the current record's "nombre" value
 * @method string              getApellido()       Returns the current record's "apellido" value
 * @method integer             getGenero()         Returns the current record's "genero" value
 * @method timestamp           getUltimoIngreso()  Returns the current record's "ultimo_ingreso" value
 * @method integer             getIdRol()          Returns the current record's "id_rol" value
 * @method integer             getStatus()         Returns the current record's "status" value
 * @method Rol                 getRol()            Returns the current record's "Rol" value
 * @method Doctrine_Collection getEmpleado()       Returns the current record's "Empleado" collection
 * @method Doctrine_Collection getPaciente()       Returns the current record's "Paciente" collection
 * @method Usuario             setIdUsuario()      Sets the current record's "id_usuario" value
 * @method Usuario             setUsername()       Sets the current record's "username" value
 * @method Usuario             setEmail()          Sets the current record's "email" value
 * @method Usuario             setPassword()       Sets the current record's "password" value
 * @method Usuario             setNombre()         Sets the current record's "nombre" value
 * @method Usuario             setApellido()       Sets the current record's "apellido" value
 * @method Usuario             setGenero()         Sets the current record's "genero" value
 * @method Usuario             setUltimoIngreso()  Sets the current record's "ultimo_ingreso" value
 * @method Usuario             setIdRol()          Sets the current record's "id_rol" value
 * @method Usuario             setStatus()         Sets the current record's "status" value
 * @method Usuario             setRol()            Sets the current record's "Rol" value
 * @method Usuario             setEmpleado()       Sets the current record's "Empleado" collection
 * @method Usuario             setPaciente()       Sets the current record's "Paciente" collection
 * 
 * @package    asi2vSymfony
 * @subpackage model
 * @author     McCubo
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsuario extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('usuario');
        $this->hasColumn('id_usuario', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('email', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('password', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('nombre', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('apellido', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('genero', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('ultimo_ingreso', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('id_rol', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Rol', array(
             'local' => 'id_rol',
             'foreign' => 'id_rol'));

        $this->hasMany('Empleado', array(
             'local' => 'id_usuario',
             'foreign' => 'id_usuario'));

        $this->hasMany('Paciente', array(
             'local' => 'id_usuario',
             'foreign' => 'id_usuario'));
    }
}